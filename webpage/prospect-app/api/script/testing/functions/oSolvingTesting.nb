(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     81701,       1685]
NotebookOptionsPosition[     78823,       1628]
NotebookOutlinePosition[     79215,       1644]
CellTagsIndexPosition[     79172,       1641]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Static", " ", "example", " ", "1", " ", "as", " ", "we", " ", 
    "originally", " ", "solved", " ", "it", " ", "in", " ", "Mathematica"}], 
   " ", "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"Clear", "[", 
     RowBox[{"outcomes3", ",", "eqs3", ",", "constr3"}], "]"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"outcomes3", "=", 
     RowBox[{"{", 
      RowBox[{"o00", ",", "o01", ",", "o10", ",", "o11"}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", "\n", 
   RowBox[{
    RowBox[{"eqs3", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"Plus", "@@", "outcomes3"}], "\[Equal]", "1"}], ",", 
       RowBox[{"o00", "\[Equal]", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"o00", "+", "o01"}], ")"}], "*", 
         RowBox[{"(", 
          RowBox[{"o00", "+", "o10"}], ")"}]}]}], ",", 
       RowBox[{
        RowBox[{"o00", "+", "o01"}], "\[Equal]", ".3"}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"o00", "+", "o01"}], ")"}], "+", 
         RowBox[{"(", 
          RowBox[{"o00", "+", "o10"}], ")"}], "-", 
         RowBox[{"(", "o00", ")"}]}], "\[Equal]", "1"}]}], "}"}]}], ";"}], 
   "\n", 
   RowBox[{
    RowBox[{"constr3", "=", 
     RowBox[{
      RowBox[{
       RowBox[{"#", "\[Element]", 
        RowBox[{"Interval", "[", 
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}], "]"}]}], "&"}], "/@", 
      "outcomes3"}]}], ";"}], "\[IndentingNewLine]", "\n", 
   RowBox[{"s", " ", "=", " ", 
    RowBox[{"Solve", "[", 
     RowBox[{
      RowBox[{"Join", "[", 
       RowBox[{"eqs3", ",", "constr3"}], "]"}], ",", "outcomes3", ",", 
      "Reals"}], "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.806075386941469*^9, 
  3.80607541248197*^9}},ExpressionUUID->"504ebbb7-c4f7-425c-b9b0-\
11c3c248aefa"],

Cell[BoxData[
 TemplateBox[{
  "Solve", "ratnz", 
   "\"Solve was unable to solve the system with inexact coefficients. The \
answer was obtained by solving a corresponding exact system and numericizing \
the result.\"", 2, 5, 1, 30366499015581275033, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.806074286259503*^9},
 CellLabel->
  "During evaluation of \
In[1]:=",ExpressionUUID->"8794655e-0bdd-4f5f-b529-88d6093c99b0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"o00", "\[Rule]", 
      RowBox[{"{", "0.3`", "}"}]}], ",", 
     RowBox[{"o01", "\[Rule]", 
      RowBox[{"{", "0", "}"}]}], ",", 
     RowBox[{"o10", "\[Rule]", 
      RowBox[{"{", "0.7`", "}"}]}], ",", 
     RowBox[{"o11", "\[Rule]", 
      RowBox[{"{", "0", "}"}]}]}], "}"}], "}"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "Example", " ", "workflow", " ", "to", " ", "generate", " ", "static", 
     " ", "data"}], ",", " ", 
    RowBox[{"showcasing", " ", "static", " ", "example", " ", "1"}]}], " ", 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"IMPORTANT", " ", 
    RowBox[{"POINTS", ":", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"-", " ", "oEquations"}], " ", "must", " ", "be", " ", 
       "determined", " ", "correctly", " ", "in", " ", "terms", " ", "of", 
       " ", "the", " ", "o", " ", "parameters"}], "\[IndentingNewLine]", "-", 
      " ", 
      RowBox[{
      "All", " ", "o", " ", "parameters", " ", "must", " ", "be", " ", 
       "specified", " ", "before", " ", "a", " ", "categorical", " ", 
       "distribution", " ", "can", " ", "be", " ", "fully", " ", 
       "defined"}]}]}]}], "\[IndentingNewLine]", "*)"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.806075225781383*^9, 3.806075380448575*^9}, {
  3.806075418789383*^9, 
  3.8060754257751017`*^9}},ExpressionUUID->"2aa2cb41-2d36-4903-b68e-\
de0d98f8ddc6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"oParams", " ", "=", " ", 
  RowBox[{"oGen", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"X", ",", " ", "Y"}], "}"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", " ", "1"}], "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{"0", ",", " ", "1"}], "}"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8060743262146273`*^9, 3.806074349065968*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"f6c12496-043b-4091-acce-ccaa61dc24aa"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     SubscriptBox["o", 
      RowBox[{"1", ",", "1"}]], ",", 
     SubscriptBox["o", 
      RowBox[{"1", ",", "2"}]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     SubscriptBox["o", 
      RowBox[{"2", ",", "1"}]], ",", 
     SubscriptBox["o", 
      RowBox[{"2", ",", "2"}]]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.8060743500885363`*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"ff76c25b-804b-4c82-9d27-1ff85c1edcb9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"oOutput", " ", "=", " ", 
  RowBox[{"oOutcomes", "[", "oParams", "]"}]}]], "Input",
 CellChangeTimes->{{3.8060743581592216`*^9, 3.806074375510013*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"55e2650b-1237-419d-bdfc-523a63539bcb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   SubscriptBox["o", 
    RowBox[{"1", ",", "1"}]], ",", 
   SubscriptBox["o", 
    RowBox[{"1", ",", "2"}]], ",", 
   SubscriptBox["o", 
    RowBox[{"2", ",", "1"}]], ",", 
   SubscriptBox["o", 
    RowBox[{"2", ",", "2"}]]}], "}"}]], "Output",
 CellChangeTimes->{3.8060743759953823`*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"4ef17f5d-caca-4e1a-86ed-9a8a56fbf067"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"oEquations", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"givenEquation", "[", "oParams", "]"}], ",", 
     "\[IndentingNewLine]", " ", 
     RowBox[{
      SubscriptBox["o", 
       RowBox[{"1", ",", "1"}]], " ", "\[Equal]", " ", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         SubscriptBox["o", 
          RowBox[{"1", ",", "1"}]], " ", "+", " ", 
         SubscriptBox["o", 
          RowBox[{"1", ",", "2"}]]}], ")"}], "*", " ", 
       RowBox[{"(", 
        RowBox[{
         SubscriptBox["o", 
          RowBox[{"1", ",", "1"}]], " ", "+", " ", 
         SubscriptBox["o", 
          RowBox[{"2", ",", "1"}]]}], ")"}]}]}], ",", " ", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       SubscriptBox["o", 
        RowBox[{"1", ",", "1"}]], " ", "+", " ", 
       SubscriptBox["o", 
        RowBox[{"2", ",", "1"}]]}], " ", "\[Equal]", " ", ".3"}], ",", " ", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         SubscriptBox["o", 
          RowBox[{"1", ",", "1"}]], " ", "+", " ", 
         SubscriptBox["o", 
          RowBox[{"1", ",", "2"}]]}], ")"}], " ", "+", " ", 
       RowBox[{"(", 
        RowBox[{
         SubscriptBox["o", 
          RowBox[{"1", ",", "1"}]], " ", "+", " ", 
         SubscriptBox["o", 
          RowBox[{"2", ",", "1"}]]}], ")"}], " ", "-", " ", 
       SubscriptBox["o", 
        RowBox[{"1", ",", "1"}]]}], " ", "\[Equal]", " ", "1"}]}], "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.8060743837216387`*^9, 3.806074543267466*^9}, {
  3.806074768086982*^9, 3.80607477439081*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"5e579c67-8615-477d-917b-79f0896db4e5"],

Cell[BoxData[
 RowBox[{
  RowBox[{"oConstraints", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"#", "\[Element]", 
      RowBox[{"Interval", "[", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}], "]"}]}], "&"}], "/@", "oOutput"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.8060745719166193`*^9, 3.8060745815723877`*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"1808cc97-33e7-4a08-a2ca-2589d7b6ed72"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"oSolve", " ", "=", " ", 
  RowBox[{"Solve", "[", 
   RowBox[{
    RowBox[{"Join", "[", 
     RowBox[{"oEquations", ",", "oConstraints"}], "]"}], ",", "oOutput", ",", 
    "Reals"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.806074599335141*^9, 3.806074625163784*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"75b83a4d-baae-4476-8285-52e42645d7f4"],

Cell[BoxData[
 TemplateBox[{
  "Solve", "ratnz", 
   "\"Solve was unable to solve the system with inexact coefficients. The \
answer was obtained by solving a corresponding exact system and numericizing \
the result.\"", 2, 22, 5, 30366499015581275033, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.8060746266274757`*^9, 3.806074840426811*^9},
 CellLabel->
  "During evaluation of \
In[22]:=",ExpressionUUID->"6b0251b5-2227-467e-9df9-15983358a2fb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     SubscriptBox["o", 
      RowBox[{"1", ",", "1"}]], "\[Rule]", 
     RowBox[{"{", "0.3`", "}"}]}], ",", 
    RowBox[{
     SubscriptBox["o", 
      RowBox[{"1", ",", "2"}]], "\[Rule]", 
     RowBox[{"{", "0.7`", "}"}]}], ",", 
    RowBox[{
     SubscriptBox["o", 
      RowBox[{"2", ",", "1"}]], "\[Rule]", 
     RowBox[{"{", "0", "}"}]}], ",", 
    RowBox[{
     SubscriptBox["o", 
      RowBox[{"2", ",", "2"}]], "\[Rule]", 
     RowBox[{"{", "0", "}"}]}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.806074626634461*^9, 3.80607484043291*^9},
 CellLabel->"Out[22]=",ExpressionUUID->"63c1b68e-9909-42d6-bdd7-c59b492fcfcb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"oRules", " ", "=", " ", 
  RowBox[{"oSolve", "[", 
   RowBox[{"[", "1", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.806074861324829*^9, 3.80607486567826*^9}},
 CellLabel->"In[23]:=",ExpressionUUID->"79bbb819-6351-433b-8e7d-b2bb46e3e20e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    SubscriptBox["o", 
     RowBox[{"1", ",", "1"}]], "\[Rule]", 
    RowBox[{"{", "0.3`", "}"}]}], ",", 
   RowBox[{
    SubscriptBox["o", 
     RowBox[{"1", ",", "2"}]], "\[Rule]", 
    RowBox[{"{", "0.7`", "}"}]}], ",", 
   RowBox[{
    SubscriptBox["o", 
     RowBox[{"2", ",", "1"}]], "\[Rule]", 
    RowBox[{"{", "0", "}"}]}], ",", 
   RowBox[{
    SubscriptBox["o", 
     RowBox[{"2", ",", "2"}]], "\[Rule]", 
    RowBox[{"{", "0", "}"}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.8060748663002996`*^9},
 CellLabel->"Out[23]=",ExpressionUUID->"6d4bfad5-bc7f-4218-a119-cedc70bf8250"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"oFinalRules", " ", "=", " ", 
  RowBox[{"oRules", "//.", 
   RowBox[{
    RowBox[{"{", "x_", "}"}], "\[RuleDelayed]", "x"}]}]}]], "Input",
 CellChangeTimes->{{3.806074886732683*^9, 3.8060749023691874`*^9}},
 CellLabel->"In[26]:=",ExpressionUUID->"84d87756-60de-462c-b773-dd828dbda6f3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    SubscriptBox["o", 
     RowBox[{"1", ",", "1"}]], "\[Rule]", "0.3`"}], ",", 
   RowBox[{
    SubscriptBox["o", 
     RowBox[{"1", ",", "2"}]], "\[Rule]", "0.7`"}], ",", 
   RowBox[{
    SubscriptBox["o", 
     RowBox[{"2", ",", "1"}]], "\[Rule]", "0"}], ",", 
   RowBox[{
    SubscriptBox["o", 
     RowBox[{"2", ",", "2"}]], "\[Rule]", "0"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.806074891376061*^9, 3.806074903506053*^9}},
 CellLabel->"Out[26]=",ExpressionUUID->"7ea80cd4-2fe7-45bb-83db-797bf231adc9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"oParams", " ", "/.", " ", "oFinalRules"}]], "Input",
 CellChangeTimes->{{3.8060749186316013`*^9, 3.806074929504012*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"a31899a0-53e9-4c4c-9580-325bc102191a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.3`", ",", "0.7`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.806074931238462*^9},
 CellLabel->"Out[27]=",ExpressionUUID->"a1fd2598-4ed4-486a-b4e1-b35ada3a4c97"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"oD", " ", "=", " ", 
  RowBox[{"CategoricalDistribution", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"X", "\[Equal]", "0"}], ",", " ", 
        RowBox[{"X", "\[Equal]", "1"}]}], "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Y", "\[Equal]", "0"}], ",", " ", 
        RowBox[{"Y", "\[Equal]", "1"}]}], "}"}]}], "}"}], ",", " ", 
    RowBox[{"oParams", " ", "/.", " ", "oFinalRules"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8060750061073008`*^9, 3.806075041971013*^9}, {
  3.806075114003089*^9, 3.80607515277798*^9}, {3.806075201065741*^9, 
  3.806075205641584*^9}},
 CellLabel->"In[36]:=",ExpressionUUID->"bcec9a04-d329-4d5e-a28d-d0b10c9407a2"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["CategoricalDistribution",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               GrayLevel[0.55], 
               RectangleBox[{0., 0.}, {0.87, 1.}, "RoundingRadius" -> 0]}, {
               GrayLevel[0.8], 
               RectangleBox[{1., 0.}, {1.88, 2.}, "RoundingRadius" -> 0]}, {
               GrayLevel[0.65], 
               RectangleBox[{2., 0.}, {2.88, 3.}, "RoundingRadius" -> 0]}}, 
             Background -> GrayLevel[1], ImageSize -> {Automatic, 29.029}, 
             AspectRatio -> 1], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"\"Vector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "2", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Categories: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"\[Times]", "\"\[Times]\"", 
                    TagBox[
                    GridBox[{{
                    RowBox[{"X", "\[Equal]", "0"}], 
                    RowBox[{"X", "\[Equal]", "1"}]}}, AutoDelete -> False, 
                    GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    FrameStyle -> GrayLevel[0.8]], "Grid"], 
                    TagBox[
                    GridBox[{{
                    RowBox[{"Y", "\[Equal]", "0"}], 
                    RowBox[{"Y", "\[Equal]", "1"}]}}, AutoDelete -> False, 
                    GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    FrameStyle -> GrayLevel[0.8]], "Grid"]}, 
                   "RowWithSeparators"], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               GrayLevel[0.55], 
               RectangleBox[{0., 0.}, {0.87, 1.}, "RoundingRadius" -> 0]}, {
               GrayLevel[0.8], 
               RectangleBox[{1., 0.}, {1.88, 2.}, "RoundingRadius" -> 0]}, {
               GrayLevel[0.65], 
               RectangleBox[{2., 0.}, {2.88, 3.}, "RoundingRadius" -> 0]}}, 
             Background -> GrayLevel[1], ImageSize -> {Automatic, 29.029}, 
             AspectRatio -> 1], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"\"Vector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "2", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Categories: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"\[Times]", "\"\[Times]\"", 
                    TagBox[
                    GridBox[{{
                    RowBox[{"X", "\[Equal]", "0"}], 
                    RowBox[{"X", "\[Equal]", "1"}]}}, AutoDelete -> False, 
                    GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    FrameStyle -> GrayLevel[0.8]], "Grid"], 
                    TagBox[
                    GridBox[{{
                    RowBox[{"Y", "\[Equal]", "0"}], 
                    RowBox[{"Y", "\[Equal]", "1"}]}}, AutoDelete -> False, 
                    GridBoxFrame -> {
                    "Columns" -> {{True}}, "Rows" -> {{True}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    FrameStyle -> GrayLevel[0.8]], "Grid"]}, 
                   "RowWithSeparators"], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Probabilities: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"\"", "SummaryItem"]}]}, {
               TagBox[
                StyleBox[
                 TagBox[
                  TagBox[
                   
                   DynamicModuleBox[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
                    Association[
                    "InitialData" -> 
                    Association[$CellContext`X == 0 -> 
                    Association[$CellContext`Y == 0 -> 
                    NumberForm[0.3, 2], $CellContext`Y == 1 -> 
                    NumberForm[0.7, 2]], $CellContext`X == 1 -> 
                    Association[$CellContext`Y == 0 -> 
                    NumberForm[0., 2], $CellContext`Y == 1 -> 
                    NumberForm[0., 2]]], "InitialShape" -> 
                    TypeSystem`PackageScope`Limited[
                    TypeSystem`PackageScope`ColumnShape[
                    TypeSystem`PackageScope`KeyValueShape[
                    TypeSystem`PackageScope`UnknownShape[True], 
                    TypeSystem`PackageScope`Limited[
                    TypeSystem`PackageScope`ColumnShape[
                    TypeSystem`PackageScope`KeyValueShape[
                    TypeSystem`PackageScope`UnknownShape[True], 
                    TypeSystem`PackageScope`UnknownShape[False]]], 2, 
                    DirectedInfinity[1], {All}]]], 2, 
                    DirectedInfinity[1], {}], "InitialType" -> 
                    TypeSystem`Assoc[TypeSystem`AnyType, 
                    TypeSystem`Assoc[
                    TypeSystem`AnyType, TypeSystem`AnyType, 2], 2], "Meta" -> 
                    Association["ID" -> 25675523033095], "RowTarget" -> 20, 
                    "ColumnTarget" -> 10, "Shape" -> 
                    TypeSystem`PackageScope`Limited[
                    TypeSystem`PackageScope`ColumnShape[
                    TypeSystem`PackageScope`KeyValueShape[
                    TypeSystem`PackageScope`UnknownShape[True], 
                    TypeSystem`PackageScope`Limited[
                    TypeSystem`PackageScope`ColumnShape[
                    TypeSystem`PackageScope`KeyValueShape[
                    TypeSystem`PackageScope`UnknownShape[True], 
                    TypeSystem`PackageScope`UnknownShape[False]]], 2, 
                    DirectedInfinity[1], {All}]]], 2, 
                    DirectedInfinity[1], {}], "Type" -> 
                    TypeSystem`Assoc[TypeSystem`AnyType, 
                    TypeSystem`Assoc[
                    TypeSystem`AnyType, TypeSystem`AnyType, 2], 2], 
                    "Path" -> {}, "BaseIndices" -> {}, "DisplayedRowCount" -> 
                    2, "DisplayedColumnCount" -> 1, "DataRowCount" -> 2, 
                    "DataColumnCount" -> 1, "SortPaths" -> {}, 
                    "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
                    "UpdateType" -> 1], 
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
                    DynamicModule[{
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
                    Style[
                    Grid[{{
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    RowBox[{"X", "\[Equal]", "0"}], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$][{
                    Key[$CellContext`X == 0]}, "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    RowBox[{"Y", "\[Equal]", "0"}], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$][{
                    Key[$CellContext`X == 0], 
                    Key[$CellContext`Y == 0]}, "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Item[
                    Pane[
                    Annotation[
                    NumberForm[0.3, 2], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$][{
                    Key[$CellContext`X == 0], 
                    Key[$CellContext`Y == 0]}, "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}, {SpanFromAbove, 
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    RowBox[{"Y", "\[Equal]", "1"}], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$][{
                    Key[$CellContext`X == 0], 
                    Key[$CellContext`Y == 1]}, "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Item[
                    Pane[
                    Annotation[
                    NumberForm[0.7, 2], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$][{
                    Key[$CellContext`X == 0], 
                    Key[$CellContext`Y == 1]}, "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}, {
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    RowBox[{"X", "\[Equal]", "1"}], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$][{
                    Key[$CellContext`X == 1]}, "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    RowBox[{"Y", "\[Equal]", "0"}], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$][{
                    Key[$CellContext`X == 1], 
                    Key[$CellContext`Y == 0]}, "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Item[
                    Pane[
                    Annotation[
                    NumberForm[0., 2], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$][{
                    Key[$CellContext`X == 1], 
                    Key[$CellContext`Y == 0]}, "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}, {SpanFromAbove, 
                    Item[
                    Pane[
                    Annotation[
                    RawBoxes[
                    StyleBox[
                    RowBox[{"Y", "\[Equal]", "1"}], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$][{
                    Key[$CellContext`X == 1], 
                    Key[$CellContext`Y == 1]}, "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
                    GrayLevel[0.95], Alignment -> {Left, Baseline}], 
                    Item[
                    Pane[
                    Annotation[
                    NumberForm[0., 2], 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$][{
                    Key[$CellContext`X == 1], 
                    Key[$CellContext`Y == 1]}, "Item", False], "Mouse"], 
                    ImageSize -> {{60, Full}, Automatic}, 
                    ImageMargins -> {{5, 3}, {4, 5}}], 
                    ItemSize -> {Full, Automatic}]}}, 
                    BaseStyle -> {
                    ContextMenu -> 
                    Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                    Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, {}, 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger, TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu,
                     True, TypeSystem`NestedGrid`PackagePrivate`$\
lastContextMenuTrigger = 
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                    TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                    Block[{TypeSystem`NestedGrid`PackagePrivate`$\
globalScrollPos = {TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                    
                    With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Show ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Hide ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}]]]]], FontFamily -> 
                    "Verdana", FontSize -> 12}, Spacings -> {0, 0}, Alignment -> 
                    Left, Dividers -> All, FrameStyle -> 
                    GrayLevel[0.7490196078431373], 
                    BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
                    LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
                    False, ShowAutoStyles -> False]], 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
                    Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
                    Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
                    
                    Module[{
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
                    TypeSystem`NestedGrid`PackagePrivate`datasetData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
                    FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    TypeSystem`NestedGrid`PackagePrivate`renderGrid[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
                    Not[
                    FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
                    TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
                    TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
                    TypeSystem`SparseGrid[
                    TypeSystem`H["(data no longer present)"]], 
                    If[GeneralUtilities`$DebugMode, 
                    
                    Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
                    "  ", 
                    TypeSystem`NestedGrid`PackagePrivate`formatState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$]}], 
                    TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
                    DynamicModuleValues :> {}], 
                    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
                    TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
                    TypeSystem`PackageScope`SubViewPathbar[
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
                    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = 
                    Style[
                    Framed[
                    Dynamic[
                    Replace[
                    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$][Null, 
                    Blank[]] -> "", 
                    TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$][
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
                    Blank[]], 
                    Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
                    Blank[]], 
                    Pattern[
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Blank[]]] :> (
                    Increment[
                    TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
                    TypeSystem`NestedGrid`PackagePrivate`path$; 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
                    TypeSystem`NestedGrid`PackagePrivate`pathType$; 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader = TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
                    TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$; 
                    TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
                    TypeSystem`NestedGrid`PackagePrivate`path$, 
                    TypeSystem`NestedGrid`PackagePrivate`makePathElements]), 
                    Null :> Spacer[10], Blank[] :> Spacer[10]}], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
                    FrameStyle -> None, ImageMargins -> 0, FrameMargins -> 0, 
                    Alignment -> Top, ImageSize -> {Automatic, 15}], FontSize -> 
                    1], TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$\
}, 
                    DynamicWrapperBox[
                    DynamicBox[
                    ToBoxes[
                    Dataset`DatasetContent[
                    2, "Path" -> 
                    Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
                    "Grid" -> Hold[
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
                    Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    "VPos" -> Hold[
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
                    Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], 
                    "TopBar" -> 
                    Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], 
                    "BottomBar" -> 
                    Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], 
                    "OutputID" -> Hold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], 
                    StandardForm], 
                    TrackedSymbols :> {
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
                    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
                    MouseAnnotation[]], Initialization :> 
                    Block[{$ContextPath = $ContextPath}, Needs["TypeSystem`"]; 
                    Needs["Dataset`"]; 
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
                    CreateUUID[]], DynamicModuleValues :> {}, 
                    BaseStyle -> {LineBreakWithin -> False}, 
                    UnsavedVariables :> {
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$}], 
                   Deploy, DefaultBaseStyle -> "Deploy"], 
                  Dataset`InterpretDataset[1], Selectable -> False, Editable -> 
                  False, SelectWithContents -> True], Magnification -> 
                 0.8 Inherited, StripOnInput -> False], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  CategoricalDistribution[
   Association["Probabilities" -> {{0.3, 0.7}, {0., 0.}}, "Index" -> {
      Association[$CellContext`X == 0 -> 1, $CellContext`X == 1 -> 2], 
      Association[$CellContext`Y == 0 -> 1, $CellContext`Y == 1 -> 2]}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.8060750304490128`*^9, 3.80607504408241*^9}, {
   3.806075133823215*^9, 3.8060751570361557`*^9}, 3.806075207184547*^9},
 CellLabel->"Out[36]=",ExpressionUUID->"c16187b3-11ef-4fac-a91a-f22c3fe9dc67"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Information", "[", 
  RowBox[{"oD", ",", " ", "\"\<ProbabilityTable\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.806075164134719*^9, 3.806075177751947*^9}},
 CellLabel->"In[37]:=",ExpressionUUID->"3f60621c-93b6-49b0-bcb8-64433803d332"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
    Association[
    "InitialData" -> 
     Association[$CellContext`X == 0 -> 
       Association[$CellContext`Y == 0 -> 0.3, $CellContext`Y == 1 -> 
         0.7], $CellContext`X == 1 -> 
       Association[$CellContext`Y == 0 -> 0., $CellContext`Y == 1 -> 0.]], 
     "InitialShape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`UnknownShape[True], 
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`ColumnShape[
           TypeSystem`PackageScope`KeyValueShape[
            TypeSystem`PackageScope`UnknownShape[True], 
            TypeSystem`PackageScope`AtomShape[60]]], 2, 
          DirectedInfinity[1], {All}]]], 2, 
       DirectedInfinity[1], {}], "InitialType" -> 
     TypeSystem`Assoc[TypeSystem`AnyType, 
       TypeSystem`Assoc[TypeSystem`AnyType, 
        TypeSystem`Atom[Real], 2], 2], "Meta" -> 
     Association["ID" -> 37344949176329], "RowTarget" -> 20, "ColumnTarget" -> 
     10, "Shape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`UnknownShape[True], 
         TypeSystem`PackageScope`Limited[
          TypeSystem`PackageScope`ColumnShape[
           TypeSystem`PackageScope`KeyValueShape[
            TypeSystem`PackageScope`UnknownShape[True], 
            TypeSystem`PackageScope`AtomShape[60]]], 2, 
          DirectedInfinity[1], {All}]]], 2, 
       DirectedInfinity[1], {}], "Type" -> 
     TypeSystem`Assoc[TypeSystem`AnyType, 
       TypeSystem`Assoc[TypeSystem`AnyType, 
        TypeSystem`Atom[Real], 2], 2], "Path" -> {}, "BaseIndices" -> {}, 
     "DisplayedRowCount" -> 2, "DisplayedColumnCount" -> 1, "DataRowCount" -> 
     2, "DataColumnCount" -> 1, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"X", "\[Equal]", "0"}], FontFamily -> 
                 "Source Code Pro", ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "b1093d58-8b68-4dd1-90d6-3812b8da86c6"][{
                 Key[$CellContext`X == 0]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"Y", "\[Equal]", "0"}], FontFamily -> 
                 "Source Code Pro", ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "b1093d58-8b68-4dd1-90d6-3812b8da86c6"][{
                 Key[$CellContext`X == 0], 
                 Key[$CellContext`Y == 0]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "b1093d58-8b68-4dd1-90d6-3812b8da86c6"][{
                 Key[$CellContext`X == 0], 
                 Key[$CellContext`Y == 0]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"Y", "\[Equal]", "1"}], FontFamily -> 
                 "Source Code Pro", ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "b1093d58-8b68-4dd1-90d6-3812b8da86c6"][{
                 Key[$CellContext`X == 0], 
                 Key[$CellContext`Y == 1]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.7"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "b1093d58-8b68-4dd1-90d6-3812b8da86c6"][{
                 Key[$CellContext`X == 0], 
                 Key[$CellContext`Y == 1]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"X", "\[Equal]", "1"}], FontFamily -> 
                 "Source Code Pro", ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "b1093d58-8b68-4dd1-90d6-3812b8da86c6"][{
                 Key[$CellContext`X == 1]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"Y", "\[Equal]", "0"}], FontFamily -> 
                 "Source Code Pro", ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "b1093d58-8b68-4dd1-90d6-3812b8da86c6"][{
                 Key[$CellContext`X == 1], 
                 Key[$CellContext`Y == 0]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "b1093d58-8b68-4dd1-90d6-3812b8da86c6"][{
                 Key[$CellContext`X == 1], 
                 Key[$CellContext`Y == 0]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 RowBox[{"Y", "\[Equal]", "1"}], FontFamily -> 
                 "Source Code Pro", ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "b1093d58-8b68-4dd1-90d6-3812b8da86c6"][{
                 Key[$CellContext`X == 1], 
                 Key[$CellContext`Y == 1]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "b1093d58-8b68-4dd1-90d6-3812b8da86c6"][{
                 Key[$CellContext`X == 1], 
                 Key[$CellContext`Y == 1]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[
               TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$, {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Show ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Hide ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}]]]]], FontFamily -> 
            "Verdana", FontSize -> 12}, Spacings -> {0, 0}, Alignment -> Left,
           Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
          BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
         LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False, 
         ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         If[GeneralUtilities`$DebugMode, 
          Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
            TypeSystem`NestedGrid`PackagePrivate`formatState[
            TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
             TypeSystem`NestedGrid`PackagePrivate`$hPos$$]}], 
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$][Null, 
           Blank[]] -> "", 
         TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{225., {65.634033203125, 71.365966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{225., {65.634033203125, 71.365966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>
     Block[{$ContextPath = $ContextPath}, Needs["TypeSystem`"]; 
      Needs["Dataset`"]; 
      TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = CreateUUID[]],
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.806075178187964*^9, 3.806075208860948*^9},
 CellLabel->"Out[37]=",ExpressionUUID->"1a252dc9-f624-4b75-9b08-01132c6f81b6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomVariate", "[", 
  RowBox[{"oD", ",", " ", "10"}], "]"}]], "Input",
 CellChangeTimes->{{3.806075046054937*^9, 3.8060750572407084`*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"bf8e8160-b913-464a-848d-cbe69b1f93f5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"X", "\[Equal]", "0"}], ",", 
     RowBox[{"Y", "\[Equal]", "0"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"X", "\[Equal]", "0"}], ",", 
     RowBox[{"Y", "\[Equal]", "0"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"X", "\[Equal]", "0"}], ",", 
     RowBox[{"Y", "\[Equal]", "1"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"X", "\[Equal]", "0"}], ",", 
     RowBox[{"Y", "\[Equal]", "1"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"X", "\[Equal]", "0"}], ",", 
     RowBox[{"Y", "\[Equal]", "0"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"X", "\[Equal]", "0"}], ",", 
     RowBox[{"Y", "\[Equal]", "1"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"X", "\[Equal]", "0"}], ",", 
     RowBox[{"Y", "\[Equal]", "1"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"X", "\[Equal]", "0"}], ",", 
     RowBox[{"Y", "\[Equal]", "0"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"X", "\[Equal]", "0"}], ",", 
     RowBox[{"Y", "\[Equal]", "0"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"X", "\[Equal]", "0"}], ",", 
     RowBox[{"Y", "\[Equal]", "0"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.806075135497451*^9, 3.806075210766214*^9},
 CellLabel->"Out[38]=",ExpressionUUID->"fbe37bc1-8f48-4854-af3b-d3e35932c726"]
}, Open  ]]
},
WindowSize->{808, 703},
WindowMargins->{{4, Automatic}, {Automatic, 4}},
FrontEndVersion->"12.1 for Mac OS X x86 (64-bit) (March 18, 2020)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"c52480ef-9648-4230-967e-c26290807000"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 1901, 55, 220, "Input",ExpressionUUID->"504ebbb7-c4f7-425c-b9b0-11c3c248aefa"],
Cell[2484, 79, 448, 10, 42, "Message",ExpressionUUID->"8794655e-0bdd-4f5f-b529-88d6093c99b0"],
Cell[2935, 91, 1574, 39, 220, InheritFromParent,ExpressionUUID->"2aa2cb41-2d36-4903-b68e-de0d98f8ddc6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4546, 135, 504, 13, 30, "Input",ExpressionUUID->"f6c12496-043b-4091-acce-ccaa61dc24aa"],
Cell[5053, 150, 502, 16, 37, "Output",ExpressionUUID->"ff76c25b-804b-4c82-9d27-1ff85c1edcb9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5592, 171, 254, 4, 30, "Input",ExpressionUUID->"55e2650b-1237-419d-bdfc-523a63539bcb"],
Cell[5849, 177, 408, 12, 37, "Output",ExpressionUUID->"4ef17f5d-caca-4e1a-86ed-9a8a56fbf067"]
}, Open  ]],
Cell[6272, 192, 1730, 50, 102, "Input",ExpressionUUID->"5e579c67-8615-477d-917b-79f0896db4e5"],
Cell[8005, 244, 412, 11, 30, "Input",ExpressionUUID->"1808cc97-33e7-4a08-a2ca-2589d7b6ed72"],
Cell[CellGroupData[{
Cell[8442, 259, 369, 8, 30, "Input",ExpressionUUID->"75b83a4d-baae-4476-8285-52e42645d7f4"],
Cell[8814, 269, 474, 10, 42, "Message",ExpressionUUID->"6b0251b5-2227-467e-9df9-15983358a2fb"],
Cell[9291, 281, 701, 21, 37, "Output",ExpressionUUID->"63c1b68e-9909-42d6-bdd7-c59b492fcfcb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[10029, 307, 265, 5, 30, "Input",ExpressionUUID->"79bbb819-6351-433b-8e7d-b2bb46e3e20e"],
Cell[10297, 314, 642, 20, 37, "Output",ExpressionUUID->"6d4bfad5-bc7f-4218-a119-cedc70bf8250"]
}, Open  ]],
Cell[CellGroupData[{
Cell[10976, 339, 309, 6, 30, "Input",ExpressionUUID->"84d87756-60de-462c-b773-dd828dbda6f3"],
Cell[11288, 347, 564, 16, 37, "Output",ExpressionUUID->"7ea80cd4-2fe7-45bb-83db-797bf231adc9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[11889, 368, 223, 3, 30, "Input",ExpressionUUID->"a31899a0-53e9-4c4c-9580-325bc102191a"],
Cell[12115, 373, 298, 8, 34, "Output",ExpressionUUID->"a1fd2598-4ed4-486a-b4e1-b35ada3a4c97"]
}, Open  ]],
Cell[CellGroupData[{
Cell[12450, 386, 755, 18, 30, "Input",ExpressionUUID->"bcec9a04-d329-4d5e-a28d-d0b10c9407a2"],
Cell[13208, 406, 37352, 668, 70, "Output",ExpressionUUID->"c16187b3-11ef-4fac-a91a-f22c3fe9dc67"]
}, Open  ]],
Cell[CellGroupData[{
Cell[50597, 1079, 261, 4, 30, "Input",ExpressionUUID->"3f60621c-93b6-49b0-bcb8-64433803d332"],
Cell[50861, 1085, 26217, 485, 157, "Output",ExpressionUUID->"1a252dc9-f624-4b75-9b08-01132c6f81b6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[77115, 1575, 243, 4, 30, "Input",ExpressionUUID->"bf8e8160-b913-464a-848d-cbe69b1f93f5"],
Cell[77361, 1581, 1446, 44, 56, "Output",ExpressionUUID->"fbe37bc1-8f48-4854-af3b-d3e35932c726"]
}, Open  ]]
}
]
*)

